
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\project\RIDE\obj\main.o:     file format elf32-littlearm
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\project\RIDE\obj\main.o

Disassembly of section .text.delay_int_count:

00000000 <delay_int_count>:
delay_int_count():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:17
#include "platform_config.h"

/* functions */

static void delay_int_count(volatile unsigned int nTime)
{
   0:	b082      	sub	sp, #8
   2:	9001      	str	r0, [sp, #4]
   4:	e002      	b.n	c <delay_int_count+0xc>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:18
    for(; nTime > 0; nTime--);
   6:	9b01      	ldr	r3, [sp, #4]
   8:	3b01      	subs	r3, #1
   a:	9301      	str	r3, [sp, #4]
   c:	9b01      	ldr	r3, [sp, #4]
   e:	2b00      	cmp	r3, #0
  10:	d1f9      	bne.n	6 <delay_int_count+0x6>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:19
}
  12:	b002      	add	sp, #8
  14:	4770      	bx	lr
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.delay_1_second:

00000000 <delay_1_second>:
delay_1_second():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:22

void delay_1_second(void)
{
   0:	b510      	push	{r4, lr}
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:23
    delay_int_count(806596);
   2:	4802      	ldr	r0, [pc, #8]	(c <delay_1_second+0xc>)
   4:	f7ff fffe 	bl	0 <delay_1_second>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:24
}
   8:	bd10      	pop	{r4, pc}
   a:	46c0      	nop			(mov r8, r8)
   c:	000c4ec4 	.word	0x000c4ec4
Disassembly of section .text.delay_100_milli_second:

00000000 <delay_100_milli_second>:
delay_100_milli_second():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:27

void delay_100_milli_second(void)
{
   0:	b510      	push	{r4, lr}
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:28
    delay_int_count(80660);
   2:	4802      	ldr	r0, [pc, #8]	(c <delay_100_milli_second+0xc>)
   4:	f7ff fffe 	bl	0 <delay_100_milli_second>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:29
}
   8:	bd10      	pop	{r4, pc}
   a:	46c0      	nop			(mov r8, r8)
   c:	00013b14 	.word	0x00013b14
Disassembly of section .text.USART_SendData:

00000000 <USART_SendData>:
USART_SendData():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:34

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
   0:	05c9      	lsls	r1, r1, #23
   2:	0dc9      	lsrs	r1, r1, #23
   4:	8081      	strh	r1, [r0, #4]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:35
}
   6:	4770      	bx	lr
Disassembly of section .text.USART_ReceiveData:

00000000 <USART_ReceiveData>:
USART_ReceiveData():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:40

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
   0:	8880      	ldrh	r0, [r0, #4]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:41
}
   2:	05c0      	lsls	r0, r0, #23
   4:	0dc0      	lsrs	r0, r0, #23
   6:	4770      	bx	lr
Disassembly of section .text.USART_GetFlagStatus:

00000000 <USART_GetFlagStatus>:
USART_GetFlagStatus():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:47

FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
  FlagStatus bitstatus = RESET;
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
   0:	8803      	ldrh	r3, [r0, #0]
   2:	4219      	tst	r1, r3
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:56
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
   4:	bf0c      	ite	eq
   6:	2000      	moveq	r0, #0
   8:	2001      	movne	r0, #1
   a:	4770      	bx	lr
Disassembly of section .text.SerialPutChar:

00000000 <SerialPutChar>:
SerialPutChar():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:60

void SerialPutChar(uint8_t c)
{
  USART_SendData(USART1, c);
   0:	4601      	mov	r1, r0
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:59
  }
  return bitstatus;
}

void SerialPutChar(uint8_t c)
{
   2:	b510      	push	{r4, lr}
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:60
  USART_SendData(USART1, c);
   4:	4804      	ldr	r0, [pc, #16]	(18 <SerialPutChar+0x18>)
   6:	f7ff fffe 	bl	0 <SerialPutChar>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:61
  while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
   a:	4803      	ldr	r0, [pc, #12]	(18 <SerialPutChar+0x18>)
   c:	2180      	movs	r1, #128
   e:	f7ff fffe 	bl	0 <SerialPutChar>
  12:	2800      	cmp	r0, #0
  14:	d0f9      	beq.n	a <SerialPutChar+0xa>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:62
}
  16:	bd10      	pop	{r4, pc}
  18:	40013800 	.word	0x40013800
Disassembly of section .text.Serial_PutString:

00000000 <Serial_PutString>:
Serial_PutString():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:65

void Serial_PutString(uint8_t *s)
{
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
   4:	2400      	movs	r4, #0
   6:	e001      	b.n	c <Serial_PutString+0xc>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:68
  while (*s != '\0')
  {
    SerialPutChar(*s);
   8:	f7ff fffe 	bl	0 <Serial_PutString>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:66
  while (USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
}

void Serial_PutString(uint8_t *s)
{
  while (*s != '\0')
   c:	5d28      	ldrb	r0, [r5, r4]
   e:	3401      	adds	r4, #1
  10:	2800      	cmp	r0, #0
  12:	d1f9      	bne.n	8 <Serial_PutString+0x8>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:71
  {
    SerialPutChar(*s);
    s ++;
  }
}
  14:	bd70      	pop	{r4, r5, r6, pc}
  16:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.USART_Init:

00000000 <USART_Init>:
USART_Init():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:136
  uint32_t tmpreg = 0x00, apbclock = HSI_Value;
  uint32_t integerdivider = 0x00;
  uint32_t fractionaldivider = 0x00;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
   0:	8a03      	ldrh	r3, [r0, #16]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:144
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   2:	88ca      	ldrh	r2, [r1, #6]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:138
  uint32_t fractionaldivider = 0x00;

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
   4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
   8:	041b      	lsls	r3, r3, #16
   a:	0c1b      	lsrs	r3, r3, #16
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:144
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
   c:	4313      	orrs	r3, r2
   e:	8203      	strh	r3, [r0, #16]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:147

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  10:	8982      	ldrh	r2, [r0, #12]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:157
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  12:	890b      	ldrh	r3, [r1, #8]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:130
#define CR1_CLEAR_Mask            ((uint16_t)0xE9F3)  /*!< USART CR1 Mask */
#define CR2_STOP_CLEAR_Mask       ((uint16_t)0xCFFF)  /*!< USART CR2 STOP Bits Mask */
#define CR3_CLEAR_Mask            ((uint16_t)0xFCFF)  /*!< USART CR3 Mask */

void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
  14:	b510      	push	{r4, lr}
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:157
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  16:	888c      	ldrh	r4, [r1, #4]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:149
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
  18:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:157
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  1c:	4323      	orrs	r3, r4
  1e:	894c      	ldrh	r4, [r1, #10]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:149
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
  20:	f022 020c 	bic.w	r2, r2, #12	; 0xc
  24:	0412      	lsls	r2, r2, #16
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:157
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  26:	4323      	orrs	r3, r4
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:149
  USARTx->CR2 = (uint16_t)tmpreg;

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
  28:	0c12      	lsrs	r2, r2, #16
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:157
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
  2a:	b29b      	uxth	r3, r3
  2c:	4313      	orrs	r3, r2
  2e:	8183      	strh	r3, [r0, #12]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:160

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  30:	8a83      	ldrh	r3, [r0, #20]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:167
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
  32:	898a      	ldrh	r2, [r1, #12]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:162
  USARTx->CR1 = (uint16_t)tmpreg;

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
  34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  38:	041b      	lsls	r3, r3, #16
  3a:	0c1b      	lsrs	r3, r3, #16
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:167
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
  3c:	4313      	orrs	r3, r2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:172

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  3e:	680a      	ldr	r2, [r1, #0]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:167
  tmpreg &= CR3_CLEAR_Mask;
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
  40:	8283      	strh	r3, [r0, #20]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:172

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
  42:	4b0a      	ldr	r3, [pc, #40]	(6c <USART_Init+0x6c>)
  44:	0092      	lsls	r2, r2, #2
  46:	fbb3 f3f2 	udiv	r3, r3, r2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:173
  tmpreg = (integerdivider / 0x64) << 0x04;
  4a:	2264      	movs	r2, #100
  4c:	fbb3 f1f2 	udiv	r1, r3, r2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:176
  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
  50:	fb01 3312 	mls	r3, r1, r2, r3
  54:	011b      	lsls	r3, r3, #4
  56:	3332      	adds	r3, #50
  58:	fbb3 f3f2 	udiv	r3, r3, r2
  5c:	f003 030f 	and.w	r3, r3, #15	; 0xf
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:178
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
  60:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  64:	b29b      	uxth	r3, r3
  66:	8103      	strh	r3, [r0, #8]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:179
}
  68:	bd10      	pop	{r4, pc}
  6a:	46c0      	nop			(mov r8, r8)
  6c:	0bebc200 	.word	0x0bebc200
Disassembly of section .text.USART1_Init:

00000000 <USART1_Init>:
USART1_Init():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:182

void USART1_Init(void)
{
   0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:203
    USART_InitStructure.USART_HardwareFlowControl
                                         = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

    /* Configure the USARTx */ 
    USART_Init(USART1, &USART_InitStructure);
   2:	4c0e      	ldr	r4, [pc, #56]	(3c <USART1_Init+0x3c>)
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:194
     - One Stop Bit
     - No parity
     - Hardware flow control disabled (RTS and CTS signals)
     - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate   = 115200;
   4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8:	9300      	str	r3, [sp, #0]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:195
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
   a:	f5a3 33e1 	sub.w	r3, r3, #115200	; 0x1c200
   e:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:196
    USART_InitStructure.USART_StopBits   = USART_StopBits_1;
  12:	f8ad 3006 	strh.w	r3, [sp, #6]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:197
    USART_InitStructure.USART_Parity     = USART_Parity_No ;
  16:	f8ad 3008 	strh.w	r3, [sp, #8]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:198
    USART_InitStructure.USART_HardwareFlowControl
  1a:	f8ad 300c 	strh.w	r3, [sp, #12]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:203
                                         = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;

    /* Configure the USARTx */ 
    USART_Init(USART1, &USART_InitStructure);
  1e:	4620      	mov	r0, r4
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:200
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits   = USART_StopBits_1;
    USART_InitStructure.USART_Parity     = USART_Parity_No ;
    USART_InitStructure.USART_HardwareFlowControl
                                         = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;
  20:	f04f 030c 	mov.w	r3, #12	; 0xc
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:203

    /* Configure the USARTx */ 
    USART_Init(USART1, &USART_InitStructure);
  24:	4669      	mov	r1, sp
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:200
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits   = USART_StopBits_1;
    USART_InitStructure.USART_Parity     = USART_Parity_No ;
    USART_InitStructure.USART_HardwareFlowControl
                                         = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode       = USART_Mode_Rx | USART_Mode_Tx;
  26:	f8ad 300a 	strh.w	r3, [sp, #10]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:203

    /* Configure the USARTx */ 
    USART_Init(USART1, &USART_InitStructure);
  2a:	f7ff fffe 	bl	0 <USART1_Init>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:206

    /* Enable the USART1 */
    USART1->CR1 |= CR1_UE_Set;
  2e:	89a3      	ldrh	r3, [r4, #12]
  30:	b29b      	uxth	r3, r3
  32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  36:	81a3      	strh	r3, [r4, #12]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:207
}
  38:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
  3a:	46c0      	nop			(mov r8, r8)
  3c:	40013800 	.word	0x40013800
Disassembly of section .text.GPIO_Init:

00000000 <GPIO_Init>:
GPIO_Init():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:210

void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
   0:	b5f0      	push	{r4, r5, r6, r7, lr}
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:215
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
  uint32_t tmpreg = 0x00, pinmask = 0x00;
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
   2:	78cd      	ldrb	r5, [r1, #3]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:223
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
   4:	880e      	ldrh	r6, [r1, #0]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:216
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
  uint32_t tmpreg = 0x00, pinmask = 0x00;
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
   6:	f015 0f10 	tst.w	r5, #16	; 0x10
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:219
  { 
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
   a:	bf18      	it	ne
   c:	788b      	ldrbne	r3, [r1, #2]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:215
{
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
  uint32_t tmpreg = 0x00, pinmask = 0x00;
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
   e:	f005 070f 	and.w	r7, r5, #15	; 0xf
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:219
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  12:	bf18      	it	ne
  14:	431f      	orrne	r7, r3
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:223
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  16:	f016 0fff 	tst.w	r6, #255	; 0xff
  1a:	d020      	beq.n	5e <GPIO_Init+0x5e>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:225
  {
    tmpreg = GPIOx->CRL;
  1c:	6804      	ldr	r4, [r0, #0]
  1e:	f04f 0c00 	mov.w	ip, #0	; 0x0
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:228
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = ((uint32_t)0x01) << pinpos;
  22:	2301      	movs	r3, #1
  24:	fa03 f30c 	lsl.w	r3, r3, ip
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:230
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
  28:	ea03 0106 	and.w	r1, r3, r6
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:231
      if (currentpin == pos)
  2c:	4299      	cmp	r1, r3
  2e:	d110      	bne.n	52 <GPIO_Init+0x52>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:235
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
  30:	ea4f 028c 	mov.w	r2, ip, lsl #2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:236
        tmpreg &= ~pinmask;
  34:	230f      	movs	r3, #15
  36:	4093      	lsls	r3, r2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:238
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
  38:	fa17 f202 	lsls.w	r2, r7, r2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:236
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
  3c:	ea24 0303 	bic.w	r3, r4, r3
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:240
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
  40:	2d28      	cmp	r5, #40
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:238
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
  42:	ea43 0402 	orr.w	r4, r3, r2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:240
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
  46:	d101      	bne.n	4c <GPIO_Init+0x4c>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:242
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
  48:	6141      	str	r1, [r0, #20]
  4a:	e002      	b.n	52 <GPIO_Init+0x52>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:247
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
  4c:	2d48      	cmp	r5, #72
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:249
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
  4e:	bf08      	it	eq
  50:	6101      	streq	r1, [r0, #16]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:226
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
  52:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
  56:	f1bc 0f08 	cmp.w	ip, #8	; 0x8
  5a:	d1e2      	bne.n	22 <GPIO_Init+0x22>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:254
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
  5c:	6004      	str	r4, [r0, #0]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:258
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  5e:	2eff      	cmp	r6, #255
  60:	d921      	bls.n	a6 <GPIO_Init+0xa6>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:260
  {
    tmpreg = GPIOx->CRH;
  62:	6844      	ldr	r4, [r0, #4]
  64:	f04f 0c00 	mov.w	ip, #0	; 0x0
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:263
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
  68:	2301      	movs	r3, #1
  6a:	f10c 0208 	add.w	r2, ip, #8	; 0x8
  6e:	4093      	lsls	r3, r2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:265
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
  70:	ea03 0106 	and.w	r1, r3, r6
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:266
      if (currentpin == pos)
  74:	4299      	cmp	r1, r3
  76:	d110      	bne.n	9a <GPIO_Init+0x9a>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:270
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
  78:	ea4f 028c 	mov.w	r2, ip, lsl #2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:271
        tmpreg &= ~pinmask;
  7c:	230f      	movs	r3, #15
  7e:	4093      	lsls	r3, r2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:273
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
  80:	fa17 f202 	lsls.w	r2, r7, r2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:271
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
  84:	ea24 0303 	bic.w	r3, r4, r3
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:275
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
  88:	2d28      	cmp	r5, #40
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:273
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
  8a:	ea43 0402 	orr.w	r4, r3, r2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:275
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
  8e:	d101      	bne.n	94 <GPIO_Init+0x94>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:277
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
  90:	6141      	str	r1, [r0, #20]
  92:	e002      	b.n	9a <GPIO_Init+0x9a>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:280
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
  94:	2d48      	cmp	r5, #72
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:282
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
  96:	bf08      	it	eq
  98:	6101      	streq	r1, [r0, #16]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:261
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
  9a:	f10c 0c01 	add.w	ip, ip, #1	; 0x1
  9e:	f1bc 0f08 	cmp.w	ip, #8	; 0x8
  a2:	d1e1      	bne.n	68 <GPIO_Init+0x68>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:286
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
  a4:	6044      	str	r4, [r0, #4]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:288
  }
}
  a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
Disassembly of section .text.GPIO_Configuration:

00000000 <GPIO_Configuration>:
GPIO_Configuration():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:291

void GPIO_Configuration(void)
{
   0:	e92d 4177 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r8, lr}
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:300

    /* Configure USARTx_Tx as alternate function push-pull */
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
   4:	4d1f      	ldr	r5, [pc, #124]	(84 <GPIO_Configuration+0x84>)
   6:	ae01      	add	r6, sp, #4
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:297
    GPIO_InitTypeDef GPIO_InitStructure;

    // UART configuration ...

    /* Configure USARTx_Tx as alternate function push-pull */
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
   8:	f44f 7300 	mov.w	r3, #512	; 0x200
   c:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:298
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  10:	f04f 0803 	mov.w	r8, #3	; 0x3
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:299
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  14:	2318      	movs	r3, #24
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:300
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
  16:	4628      	mov	r0, r5
  18:	4631      	mov	r1, r6
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:304

    /* Configure USARTx_Rx as input floating */
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Rx_Pin;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  1a:	2404      	movs	r4, #4
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:299
    // UART configuration ...

    /* Configure USARTx_Tx as alternate function push-pull */
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  1c:	f88d 3007 	strb.w	r3, [sp, #7]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:298

    // UART configuration ...

    /* Configure USARTx_Tx as alternate function push-pull */
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Tx_Pin;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  20:	f88d 8006 	strb.w	r8, [sp, #6]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:300
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
  24:	f7ff fffe 	bl	0 <GPIO_Configuration>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:303

    /* Configure USARTx_Rx as input floating */
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Rx_Pin;
  28:	f44f 6380 	mov.w	r3, #1024	; 0x400
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:305
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
  2c:	4628      	mov	r0, r5
  2e:	4631      	mov	r1, r6
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:303
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);

    /* Configure USARTx_Rx as input floating */
    GPIO_InitStructure.GPIO_Pin = GPIO_USART_Rx_Pin;
  30:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:304
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  34:	f88d 4007 	strb.w	r4, [sp, #7]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:305
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);
  38:	f7ff fffe 	bl	0 <GPIO_Configuration>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:310

    // Key configuration ...

    /* Configure gpio as input : Button Left-WKUP */
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
  3c:	f04f 0301 	mov.w	r3, #1	; 0x1
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:312
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
  40:	4628      	mov	r0, r5
  42:	4631      	mov	r1, r6
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:310
    GPIO_Init(GPIO_USART, &GPIO_InitStructure);

    // Key configuration ...

    /* Configure gpio as input : Button Left-WKUP */
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
  44:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:311
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  48:	f88d 4007 	strb.w	r4, [sp, #7]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:312
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
  4c:	f7ff fffe 	bl	0 <GPIO_Configuration>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:315

    /* Configure gpio as input : Button Right-USER */
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY2_PIN;
  50:	f04f 0302 	mov.w	r3, #2	; 0x2
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:317
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
  54:	4628      	mov	r0, r5
  56:	4631      	mov	r1, r6
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:315
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY1_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);

    /* Configure gpio as input : Button Right-USER */
    GPIO_InitStructure.GPIO_Pin = GPIO_KEY2_PIN;
  58:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:316
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  5c:	f88d 4007 	strb.w	r4, [sp, #7]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:317
    GPIO_Init(GPIO_KEY, &GPIO_InitStructure);
  60:	f7ff fffe 	bl	0 <GPIO_Configuration>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:322

    // LED configuration ...

    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
  64:	f44f 7348 	mov.w	r3, #800	; 0x320
  68:	f8ad 3004 	strh.w	r3, [sp, #4]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:325
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
  6c:	4806      	ldr	r0, [pc, #24]	(88 <GPIO_Configuration+0x88>)
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:324
    // LED configuration ...

    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  6e:	2310      	movs	r3, #16
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:325
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
  70:	4631      	mov	r1, r6
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:323

    // LED configuration ...

    /* Configure gpio as output : LED1, LED2, LED3 */
    GPIO_InitStructure.GPIO_Pin = GPIO_LED1_PIN | GPIO_LED2_PIN | GPIO_LED3_PIN ;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  72:	f88d 8006 	strb.w	r8, [sp, #6]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:324
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  76:	f88d 3007 	strb.w	r3, [sp, #7]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:325
    GPIO_Init(GPIO_LED, &GPIO_InitStructure);
  7a:	f7ff fffe 	bl	0 <GPIO_Configuration>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:326
}
  7e:	e8bd 817e 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r8, pc}
  82:	46c0      	nop			(mov r8, r8)
  84:	40010800 	.word	0x40010800
  88:	40010c00 	.word	0x40010c00
Disassembly of section .text.__io_putchar:

00000000 <__io_putchar>:
__io_putchar():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:337
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
    /* Write a character to the USART */  
    if( ch == '\n') {
   0:	280a      	cmp	r0, #10
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:335
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
   2:	b510      	push	{r4, lr}
   4:	4604      	mov	r4, r0
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:337
    /* Write a character to the USART */  
    if( ch == '\n') {
   6:	d10c      	bne.n	22 <__io_putchar+0x22>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:338
        USART_SendData(USART1, '\r');
   8:	480c      	ldr	r0, [pc, #48]	(3c <__io_putchar+0x3c>)
   a:	210d      	movs	r1, #13
   c:	f7ff fffe 	bl	0 <__io_putchar>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:339
        while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
  10:	480a      	ldr	r0, [pc, #40]	(3c <__io_putchar+0x3c>)
  12:	2180      	movs	r1, #128
  14:	f7ff fffe 	bl	0 <__io_putchar>
  18:	2800      	cmp	r0, #0
  1a:	d0f9      	beq.n	10 <__io_putchar+0x10>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:340
        USART_SendData(USART1, '\n');
  1c:	4807      	ldr	r0, [pc, #28]	(3c <__io_putchar+0x3c>)
  1e:	210a      	movs	r1, #10
  20:	e001      	b.n	26 <__io_putchar+0x26>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:342
    }else {
        USART_SendData(USART1, (uint8_t) ch);
  22:	4806      	ldr	r0, [pc, #24]	(3c <__io_putchar+0x3c>)
  24:	b2e1      	uxtb	r1, r4
  26:	f7ff fffe 	bl	0 <__io_putchar>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:346
    }

    /* Loop until the end of transmission */
    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
  2a:	4804      	ldr	r0, [pc, #16]	(3c <__io_putchar+0x3c>)
  2c:	2180      	movs	r1, #128
  2e:	f7ff fffe 	bl	0 <__io_putchar>
  32:	2800      	cmp	r0, #0
  34:	d0f9      	beq.n	2a <__io_putchar+0x2a>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:349

    return ch;
}
  36:	4620      	mov	r0, r4
  38:	bd10      	pop	{r4, pc}
  3a:	46c0      	nop			(mov r8, r8)
  3c:	40013800 	.word	0x40013800
Disassembly of section .text.USART_GetCharacter:

00000000 <USART_GetCharacter>:
USART_GetCharacter():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:352

uint8_t USART_GetCharacter(USART_TypeDef *  usart_p)
{
   0:	b570      	push	{r4, r5, r6, lr}
   2:	4605      	mov	r5, r0
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:356
    uint8_t data;

    /* Loop until the end of transmission */
    while(USART_GetFlagStatus(usart_p, USART_FLAG_RXNE) == RESET);
   4:	4628      	mov	r0, r5
   6:	2120      	movs	r1, #32
   8:	f7ff fffe 	bl	0 <USART_GetCharacter>
   c:	2800      	cmp	r0, #0
   e:	d0f9      	beq.n	4 <USART_GetCharacter+0x4>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:359

    /* Write a character to the USART */
    data = USART_ReceiveData(usart_p);
  10:	4628      	mov	r0, r5
  12:	f7ff fffe 	bl	0 <USART_GetCharacter>
  16:	b2c4      	uxtb	r4, r0
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:361

    USART_SendData(usart_p, data);
  18:	4621      	mov	r1, r4
  1a:	4628      	mov	r0, r5
  1c:	f7ff fffe 	bl	0 <USART_GetCharacter>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:362
    while(USART_GetFlagStatus(usart_p, USART_FLAG_TXE) == RESET);
  20:	4628      	mov	r0, r5
  22:	2180      	movs	r1, #128
  24:	f7ff fffe 	bl	0 <USART_GetCharacter>
  28:	2800      	cmp	r0, #0
  2a:	d0f9      	beq.n	20 <USART_GetCharacter+0x20>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:366

    if( data == '\r' )  return (int)('\n');
    else                return(data);
}
  2c:	2c0d      	cmp	r4, #13
  2e:	bf14      	ite	ne
  30:	4620      	movne	r0, r4
  32:	200a      	moveq	r0, #10
  34:	bd70      	pop	{r4, r5, r6, pc}
  36:	46c0      	nop			(mov r8, r8)
Disassembly of section .text.System_Information:

00000000 <System_Information>:
System_Information():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:370

void System_Information()
{
    printf("USART1->BRR : 0x%08X\n", USART1->BRR);
   0:	4b03      	ldr	r3, [pc, #12]	(10 <System_Information+0x10>)
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:369
    if( data == '\r' )  return (int)('\n');
    else                return(data);
}

void System_Information()
{
   2:	b510      	push	{r4, lr}
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:370
    printf("USART1->BRR : 0x%08X\n", USART1->BRR);
   4:	8919      	ldrh	r1, [r3, #8]
   6:	4803      	ldr	r0, [pc, #12]	(14 <System_Information+0x14>)
   8:	b289      	uxth	r1, r1
   a:	f7ff fffe 	bl	0 <printf>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:371
}
   e:	bd10      	pop	{r4, pc}
  10:	40013800 	.word	0x40013800
  14:	00000000 	.word	0x00000000
Disassembly of section .text.main:

00000000 <main>:
main():
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:383
 */
int main(void)
{
    uint8_t ch;

    RCC->APB2ENR |= RCC_APB2Periph_GPIOA;
   0:	4a26      	ldr	r2, [pc, #152]	(9c <main+0x9c>)
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:380
 * Input  : None
 * Output : None
 * Return : None
 */
int main(void)
{
   2:	b510      	push	{r4, lr}
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:383
    uint8_t ch;

    RCC->APB2ENR |= RCC_APB2Periph_GPIOA;
   4:	6993      	ldr	r3, [r2, #24]
   6:	f043 0304 	orr.w	r3, r3, #4	; 0x4
   a:	6193      	str	r3, [r2, #24]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:384
    RCC->APB2ENR |= RCC_APB2Periph_GPIOB;
   c:	6993      	ldr	r3, [r2, #24]
   e:	f043 0308 	orr.w	r3, r3, #8	; 0x8
  12:	6193      	str	r3, [r2, #24]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:385
    RCC->APB2ENR |= RCC_APB2Periph_USART1;
  14:	6993      	ldr	r3, [r2, #24]
  16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  1a:	6193      	str	r3, [r2, #24]
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:387

    GPIO_Configuration();
  1c:	f7ff fffe 	bl	0 <main>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:389

    USART1_Init();
  20:	f7ff fffe 	bl	0 <main>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:393

    while(1)
    {
        printf("\n---------------------\n");
  24:	481e      	ldr	r0, [pc, #120]	(7c <puts+0x7c>)
  26:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:394
        printf("Press menu key\n");
  2a:	481e      	ldr	r0, [pc, #120]	(7c <puts+0x7c>)
  2c:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:395
        printf("---------------------\n");
  30:	481d      	ldr	r0, [pc, #116]	(78 <puts+0x78>)
  32:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:396
        printf("0> System Information\n");
  36:	481d      	ldr	r0, [pc, #116]	(78 <puts+0x78>)
  38:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:397
        printf("---------------------\n");
  3c:	481a      	ldr	r0, [pc, #104]	(6c <puts+0x6c>)
  3e:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:398
        printf("1> LED Test\n");
  42:	481b      	ldr	r0, [pc, #108]	(70 <puts+0x70>)
  44:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:399
        printf("2> KEY Test\n");
  48:	481a      	ldr	r0, [pc, #104]	(6c <puts+0x6c>)
  4a:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:400
        printf("3> 7-Segment Test\n");
  4e:	481a      	ldr	r0, [pc, #104]	(6c <puts+0x6c>)
  50:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:401
        printf("---------------------\n");
  54:	4814      	ldr	r0, [pc, #80]	(54 <puts+0x54>)
  56:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:402
        printf("x> quit\n\n");
  5a:	4818      	ldr	r0, [pc, #96]	(64 <puts+0x64>)
  5c:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:404

        ch = USART_GetCharacter(USART1);
  60:	4817      	ldr	r0, [pc, #92]	(60 <main+0x60>)
  62:	f7ff fffe 	bl	0 <main>
  66:	4604      	mov	r4, r0
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:405
        printf(" is selected\n\n");
  68:	4816      	ldr	r0, [pc, #88]	(c4 <main+0xc4>)
  6a:	f7ff fffe 	bl	0 <puts>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:407

        switch((char)ch)
  6e:	b263      	sxtb	r3, r4
  70:	3b30      	subs	r3, #48
  72:	2b03      	cmp	r3, #3
  74:	d80e      	bhi.n	94 <main+0x94>
  76:	e8df f003 	tbb	[pc, r3]
  7a:	0502      	.short	0x0502
  7c:	0b08      	.short	0x0b08
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:410
        {
        case '0':
            System_Information();
  7e:	f7ff fffe 	bl	0 <main>
  82:	e007      	b.n	12 <LED_Test+0x12>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:414
            break;

        case '1':
            LED_Test();
  84:	f7ff fffe 	bl	0 <LED_Test>
  88:	e004      	b.n	c <KEY_Test+0xc>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:418
            break;

        case '2':
            KEY_Test();
  8a:	f7ff fffe 	bl	0 <KEY_Test>
  8e:	e001      	b.n	6 <Seven_Segment_Test+0x6>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:422
            break;

        case '3':
            Seven_Segment_Test();
  90:	f7ff fffe 	bl	0 <Seven_Segment_Test>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:426
            break;
        }

        if('x' == (char)ch)
  94:	2c78      	cmp	r4, #120
  96:	d1c5      	bne.n	24 <main+0x24>
D:\WkPjt\MStory2.0\Mango-M32.Firmware\M32.Src012.7_Segment\src/main.c:431
        {
            break;
        }
    }
}
  98:	bd10      	pop	{r4, pc}
  9a:	46c0      	nop			(mov r8, r8)
  9c:	40021000 	.word	0x40021000
  a0:	00000016 	.word	0x00000016
  a4:	0000002d 	.word	0x0000002d
  a8:	0000003c 	.word	0x0000003c
  ac:	00000052 	.word	0x00000052
  b0:	00000068 	.word	0x00000068
  b4:	00000074 	.word	0x00000074
  b8:	00000080 	.word	0x00000080
  bc:	00000092 	.word	0x00000092
  c0:	40013800 	.word	0x40013800
  c4:	0000009b 	.word	0x0000009b
